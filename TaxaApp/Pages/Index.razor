<!-- Index.razor -->
@page "/"
@using TaxaApp.Kode
@using static TaxaApp.Kode.DistanceMatrix
@using System.Text.Json
@inject GoogleMapsService MapsService
@inject IJSRuntime JSRuntime

<iframe width="600" height="450" style="border:0" loading="lazy" allowfullscreen
        src="@Taxatur.MapUrl"></iframe>

<h3>Taxa prisudregner</h3>

<!-- Google Maps-box -->
<div id="map"></div>

<div>
    <label for="StartAdresse">Start destination:</label>
    <input id="StartAdresse" placeholder="Vælg startadresse på kortet" @bind="Taxatur.StartAdresse" />
</div>
<div>
    <label for="SlutAdresse">Slut destination:</label>
    <input id="SlutAdresse" placeholder="Vælg slutdestination på kortet" @bind="Taxatur.SlutAdresse" @bind:event="onchange" />
</div>

<div>
    <label for="VognType">Vogntype:</label>
    <select id="VognType" @bind="Taxatur.VognType">
        <option value="Almindelig vogn">Almindelig vogn</option>
        <option value="Stor vogn">Stor vogn</option>
        <!-- Tilføj flere biltyper efter behov -->
    </select>
</div>

<div>
    <label for="ValgtTidspunkt">Vælg tidspunkt:</label>
    <input type="datetime-local" id="ValgtTidspunkt" @bind="Taxatur.Tidspunkt" />
</div>

<div>
    <label for="HarCykel">Cykel:</label>
    <input id="HarCykel" type="checkbox" @bind="Taxatur.HarCykel" />
</div>
<div>
    <label for="HarLiftvogn">Liftvogn:</label>
    <input id="HarLiftvogn" type="checkbox" @bind="Taxatur.HarLiftvogn" />
</div>

<button @onclick="UdregnPris">Udregn Pris</button>

<div>
    <span>@Taxatur.DistanceResult</span>
</div>

<div>
    <span>@Taxatur.TimeResult</span>
</div>

@code {
    private Taxatur Taxatur = new Taxatur();
    private PrisUdregner PrisUdregner { get; set; }
    private PrisUdregner.PrisInformation PrisInfo = new PrisUdregner.PrisInformation();

    public Index()
    {
        PrisUdregner = new PrisUdregner();
    }

    private async Task UdregnPris()
    {
        try
        {
            // Hent afstanden fra din API-service
            var response = await MapsService.GetDistance(Taxatur.StartAdresse, Taxatur.SlutAdresse);

            if (response != null)
            {
                // Deserialiser JSON-svaret fra API'en
                var result = JsonSerializer.Deserialize<GoogleMapsDistanceMatrixResponse>(response);

                // Hent afstand og varighed fra API-svaret
                string distance = result?.rows?.FirstOrDefault()?.elements?.FirstOrDefault()?.distance?.text;
                string duration = result?.rows?.FirstOrDefault()?.elements?.FirstOrDefault()?.duration?.text;

                // Konverter afstand og varighed til numeriske værdier
                double distanceIKm = double.Parse(distance?.Replace(" km", "").Replace(".", ","));
                
                double durationIMin = double.Parse(duration?.Replace(" mins", ""));

                // Brug disse værdier til at beregne prisen
                //Taxatur.DistanceIKm = distanceIKm;
                //Taxatur.durationIMin = durationIMin;
                //PrisInfo.DistanceText = distance;
                //PrisInfo.DurationText = duration;

                // Resten af din eksisterende prisberegning logik
                PrisInfo = PrisUdregner.UdregnPris(Taxatur);

                double totalPris = PrisInfo.StartPris + (distanceIKm * PrisInfo.KilometerPris);
                double totalTidsPris = PrisInfo.StartPris + durationIMin * PrisInfo.MinutPris;


                //startPrice + (distanceInKm * pricePerKm) + (durationInMin * pricePerMin) + cykelTillæg + opbæringTillæg + lufthavnTillæg + passagerTillæg + liftvognTillæg + broTillæg;

                Taxatur.DistanceResult = distance != null ? $"Afstand: {distance}, Pris: {totalPris} DKK" : "";
                Taxatur.TimeResult = duration != null ? $"Tid: {duration}, Pris: {totalTidsPris} DKK" : "";

                Taxatur.MapUrl = $"https://www.google.com/maps/embed/v1/directions?key=AIzaSyAMX2xaib8pawKfNoBlzSSFy5tCzo3RI7g&origin={Taxatur.StartAdresse}&destination={Taxatur.SlutAdresse}";

                Console.WriteLine($"Afstand: {distanceIKm} km");
                Console.WriteLine($"StartPris: {PrisInfo.StartPris}");
                Console.WriteLine($"KilometerPris: {PrisInfo.KilometerPris}");
                Console.WriteLine($"MinutPris: {PrisInfo.MinutPris}");
                Console.WriteLine($"TotalPris: {totalPris}");
                Console.WriteLine($"Afstand fra API: {distance}");


            }
            else
            {
                // Håndter fejl eller vis en fejlmeddelelse til brugeren
                Console.WriteLine("Fejl: Ugyldigt svar fra API'en.");
                // Vis en fejlmeddelelse til brugeren, eller håndter fejlen på anden måde
            }
        }
        catch (Exception ex)
        {
            // Håndter exceptions her, f.eks. vis fejlmeddelelse til brugeren eller log fejlen
            Console.WriteLine($"Fejl: {ex.Message}");

        }
    }
}
